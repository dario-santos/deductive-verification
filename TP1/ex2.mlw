(* 
  Referencias:
   - [1] “A note on a standard strategy for developing loop invariants and 
      loops, Sci. Comput. Programming, 2, pp. 207-214. 1982.”;
   - [2] https://www.geeksforgeeks.org/smallest-sum-contiguous-subarray/.
   
  Autores:
   - Dário Santos 10929;
   - David Bugalho 11031.

  Dificuldades: Tivemos problemas em compreender a sintaxe utilizada no pseudo código.
*)

(*
  Module: PaperExample
  Date: 12/06/2021
  Description: Implementação do exemplo do artigo [1]
*)
module PaperExample
  use int.Int
  use ref.Ref
  use array.Array
  use array.ArraySum

  let example (v: array int) : int
    requires{length v >= 0}
    ensures{let n = length v in result = (sum v 0 n) }
    =
    let n = length v in
    let p = ref 0 in
    
    for i=0 to n-1 do
      invariant{0 <= i <= n}
      invariant{!p = (sum v 0 i)}
      p := !p + v[i]
    done;
    !p
end


(*
  Module: Exercise
  Date: 25/06/2021
  Description: Implementação do algoritmo soma da secção minima de um vetor do artigo [1]
*)
module Exercise
  use int.Int
  use int.Abs
  use int.MinMax
  use ref.Ref
  use array.Array
  use array.ArraySum
  use array.ArrayPermut
  use array.ArrayEq

lemma intervals_in_array:
   forall v: array int. length v > 0 ->( 
    (forall i j: int. 0 <= i <= j <= (length v) ->
      (exists r s: int. 0 <= r <= s <= (length v) /\ r = i /\ s = j /\ (sum v i j) = (sum v r s))))
  
  let ex2 (v: array int) : (int, int, int)
    requires{length v > 0}
    ensures {permut_all (old v) v}
    ensures {let r, _, _ = result in 
      forall i j:int. 0 <= i < j <= (length v) -> r <= (sum v i j)}
    ensures {let _, i_r, f_r = result in 
      exists i j:int. 0 <= i <= j <= (length v) /\ i = i_r /\ j = f_r /\ (sum v i (j+1)) = (sum v i_r (f_r+1))}
   =
    let n = length v in
    let s = ref v[0] in
    let c = ref v[0] in

    let i_c, f_c = ref 0, ref 0 in
    let i_s, f_s = ref 0, ref 0 in
    
    for k=1 to n-1 do
      invariant {0 <= k <= n}
      invariant {permut_all (old v) v}

      invariant {forall i j:int. 0 <= i < j <= k -> !s <= (sum v i j)}
      invariant {forall i:int. 0 <= i < k -> !c <= (sum v i k)}

      invariant {exists i j:int. 0 <= i <= j <= k /\ i = !i_s /\ j = !f_s /\ (sum v i (j+1)) = (sum v !i_s (!f_s+1))}
      invariant {exists i j:int. 0 <= i <= j <= k /\ i = !i_c /\ j = !f_c /\ (sum v i (j+1)) = (sum v !i_c (!f_c+1))}
      
      c := min (!c + v[k]) v[k];
      s := min !s !c;
      
      if v[k] < (!c + v[k]) then i_c := k;
      f_c := k;
      
      if !s = !c then(
        i_s := !i_c; 
        f_s := !f_c;      
      );

    done;
    !s, !i_s, !f_s
end
