(*
  Referencias:
   - http://why3.lri.fr/stdlib-0.81/int.why.html;
   - http://why3.lri.fr/stdlib-0.81/real.why.html;
   - http://toccata.lri.fr/gallery/isqrt.en.html.
  
  Autores:
   - Dário Santos 10929;
   - David Bugalho 11031.

  Este exercício apresentou-nos diversas dificuldades devido à pouca experiência que possuimos em Why3.
  Na definição das pós condições inicialmente possuiamos demasiadas redundâncias, uma pós condição para cada caso (quando o número é primo, e quando não o é)
  por exemplo possuiamos o exist para quando não fosse primo (existe um número que divide) e o forall para quando era primo (para cada número nenhum divide).
   
  Numa tentativa de simplificar esta complexidade, foi utilizado o módulo Prime do Why3 (prime n). Por não conseguirmos chegar a um invariante para esta 
  póscondição retornamos um passo a trás e recolocamos o (forall i. 2 <= i < n -> (mod n i) = 0)
  
  Aquando a implementação da otimização da raiz quadrada, surgiu-nos a ideia de substituir o forall pelo exist, visto que este faz mais sentido com o problema em questão.
  O de "existir" um divisor de n. 
  
  Na pré-condição é necessário garantir que este é maior do que 1, pois não faria sentido matemáticamente verificar a sua primalidade.
  
  Otimização: verificar os números até a divisão até n/2 em vez de até n.
*)

(*
  Pseudo Código:

  primo(n) :
    para i=2 até n-1 fazer
      se i divide n então devolver falso 
    
    devolver verdade
*)


(*
  Module: Primo
  Date: 11/06/2021
  Description: Verificação da primalidade, utilizando um algoritmo ingénuo
*)
module Primo
  use int.Int
  use int.EuclideanDivision
  use ref.Ref
  use number.Divisibility
  
  let primo (n:int) : bool
    requires{n > 1}
    ensures {(not result) <-> (exists j. 2 <= j < n /\ divides n j)}
  =
    let resultado = ref true in

    for i=2 to n-1 do
      invariant{2 <= i /\ i <= n }
      
      invariant{(not !resultado) <-> (exists j. 2 <= j < i /\ divides n j)}

      if divides n i then resultado := false

    done;
    !resultado
end




(*
  Module: Primo_Halved
  Date: 11/06/2021
  Description: Verificação da primalidade dum número, com a otimização da sua divisão por 2
*)
module Primo_Halved
  use int.Int
  use int.EuclideanDivision
  use ref.Ref
  use number.Divisibility
  
  let primo_halved (n:int) : bool
    requires{n > 1}
    ensures {(not result) <-> (exists j. 2 <= j < n /\ divides n j)}
  =
    let resultado = ref true in
    let n2 = (div n 2) in

    for i=2 to n2 do
      invariant{2 <= i /\ i <= n2+1 }
      
      invariant{(not !resultado) <-> (exists j. 2 <= j < i /\ divides n j)}

      if (divides n i) then resultado := false

    done;
    !resultado
end



(*
  Module: Primo_Sqrt
  Date: 11/06/2021
  Description: Verificação da primalidade dum número, com a otimização da sua raiz quadrada
  Referencias: http://toccata.lri.fr/gallery/isqrt.en.html
*)
module Primo_Sqrt
  
  (* Utilização do ficheiro local *)
  use isqrt.Gallery_Isqrt
  
  use int.Int
  use int.EuclideanDivision
  use ref.Ref
  use number.Divisibility

  let primo_sqrt (n:int) : bool
    requires{n > 1}
    ensures {(not result) <-> (exists j. 2 <= j < n /\ (divides n j))}
  =
    let resultado = ref true in
    let n2 = (isqrt n) in

    for i=2 to n2 do
      invariant{2 <= i /\ i <= n2+1}
      
      invariant {(not !resultado) <-> (exists j. 2 <= j < i /\ (divides n j))}

      if divides n i then resultado := false

    done;
    !resultado
end